# Generated by Django 5.0.1 on 2024-02-17 08:41

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Время мероприятия')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('description', ckeditor.fields.RichTextField(verbose_name='Описание')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/', verbose_name='Фотография')),
            ],
            options={
                'verbose_name_plural': 'Мероприятия',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Meta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField(unique=True, verbose_name='Ключ (ссылка)')),
                ('title', models.TextField(verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Мета',
                'verbose_name_plural': 'Мета',
            },
        ),
        migrations.CreateModel(
            name='ResultModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Время прохождения')),
                ('frontend', models.CharField(max_length=255)),
                ('backend', models.CharField(max_length=255)),
                ('ux_ui', models.CharField(max_length=255)),
                ('data_science', models.CharField(max_length=255)),
                ('mobile_development', models.CharField(max_length=255)),
                ('machine_learning', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Результаты',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/', verbose_name='Фотография')),
                ('telegram', models.CharField(blank=True, max_length=255, null=True, verbose_name='Телеграм аккаунт')),
                ('status', models.CharField(blank=True, choices=[('working', 'работаю'), ('studying', 'учусь'), ('looking_for_job', 'в поиске работы')], max_length=255, null=True, verbose_name='Статус')),
                ('about_me', models.TextField(blank=True, null=True, verbose_name='Обо мне')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.resultmodel', verbose_name='Результаты')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
                'ordering': ['surname', 'name', 'patronymic'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ArticleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('title_en', models.CharField(max_length=255, verbose_name='Название (англ)')),
                ('text', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Текст')),
                ('author', models.CharField(max_length=255, verbose_name='Автор')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('image', models.ImageField(blank=True, null=True, upload_to='article_images/', verbose_name='Фотография')),
                ('categories', models.ManyToManyField(blank=True, to='api.categorymodel', verbose_name='Категории')),
            ],
            options={
                'verbose_name_plural': 'Статьи',
            },
        ),
        migrations.CreateModel(
            name='ContactModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mail', models.CharField(max_length=255, verbose_name='почта')),
                ('telegram', models.CharField(blank=True, max_length=255, null=True, verbose_name='telegram')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Сообщения',
            },
        ),
        migrations.CreateModel(
            name='MentorModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/', verbose_name='Фотография')),
                ('telegram', models.CharField(blank=True, max_length=255, null=True, verbose_name='Телеграм аккаунт')),
                ('status', models.CharField(blank=True, choices=[('career_start', 'старт в карьере'), ('transition_to_another_area', 'переход в другую сферу '), ('resume', 'резюме'), ('motivation', 'мотивация'), ('choosing_professional_path', 'выбор профессионального пути'), ('interview', 'собеседование')], max_length=255, null=True, verbose_name='Статус')),
                ('about_me', models.TextField(blank=True, null=True, verbose_name='Обо мне')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='mentors_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='mentors_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Менторы',
                'ordering': ['surname', 'name', 'patronymic'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MentorAppointmentModel',
            fields=[
                ('contactmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.contactmodel')),
                ('description', models.TextField(verbose_name='Текст')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_forms', to=settings.AUTH_USER_MODEL, verbose_name='Ментор')),
            ],
            options={
                'verbose_name_plural': 'Записи к менторам',
            },
            bases=('api.contactmodel',),
        ),
    ]
